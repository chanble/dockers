user www-data;
worker_processes  4;
worker_cpu_affinity auto;
worker_rlimit_nofile 100000;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  "pipe:rollback logs/error_log interval=1d baknum=7 maxsize=2G";

pid        logs/nginx.pid;


events {
    worker_connections  20480;
    multi_accept on;
    use epoll;
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
    include       mime.types;
    default_type  application/octet-stream;
    server_tokens off;
    server_info off;
    server_tag off;

    map $http_x_forwarded_for  $clientRealIp {
        ""     $remote_addr;
        ~^(?P<firstAddr>[0-9\.]+),?.*$   $firstAddr;
    }

    log_format log_json '{ "time_local": "$time_local", '
                         '"remote_addr": "$remote_addr", '
                         '"clientrealip": "$clientrealip", '
                         '"hostname": "$hostname", '
                         '"server_name": "$server_name", '
                         '"request": "$request", '
                         '"request_length": $request_length, '
                         '"request_body": "$request_body", '
                         '"request_time": $request_time, '
                         '"http_host": "$http_host", '
                         '"http_referer": "$http_referer", '
                         '"status": $status, '
                         '"body_bytes_sent": $body_bytes_sent, '
                         '"http_user_agent": "$http_user_agent", '
                         '"http_x_forwarded_for": "$http_x_forwarded_for", '
                         '"upstream_response_time": "$upstream_response_time", '
                         '"header_from": "$http_from", '
                         '"header_versions": "$http_versions", '
                         '"header_deviceid": "$http_deviceid", '
                         '"header_appid": "$http_appid", '
                         '"header_token": "$http_token", '
                         '"origin_host": "$http_origin_host"'
                         ' }';
    #access_log  logs/access.log  main;
    #access_log  "pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G"  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    #fastcgi_connect_timeout 600;
    #fastcgi_send_timeout 600;
    #fastcgi_read_timeout 600;
    gzip  on;
    gzip_comp_level 6;
    gzip_types image/jpeg image/png image/gif text/css application/javascript text/plain application/x-javascript text/javascript text/xml;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    client_max_body_size 8m;

    # 拒绝ip设置
    # include deny_ip.conf;
    # 访问限速、过滤等通用配置
    # include common.conf;
    # include vhost/*.conf;

    #real ip
    map $http_x_forwarded_for  $clientRealIp {
            ""      $remote_addr;
            ~^(?P<firstAddr>[0-9\.]+),?.*$  $firstAddr;
    }

    #white ip list
    geo $clientRealIp $iplist
    {
        default 0;
    }

    # 过滤head请求类型的日志
    map $request_method $loggable {
        HEAD 0;
        default 1;
    }

    #web
    # slb7层remote_addr为负载均衡IP，不能限制负载均衡转发效率
    #limit_req_zone $remote_addr zone=req0:10m rate=20r/s;
    limit_req_zone $clientRealIp zone=req1:10m rate=6r/s;
    limit_req_zone $clientRealIp $uri zone=req2:10m rate=6r/s;
    limit_req_zone $clientRealIp $request_uri zone=req3:10m rate=5r/s;
    limit_req_zone $clientRealIp zone=req4:10m rate=120r/m;

    server
    {
        listen 80 backlog=5120 default_server;

        server_name _;
        root {APP_PROJECT_ROOT}/public;
        index index.htm index.php;
        
        location = /dj_stat {
            stub_status on;
            access_log off;
        }

        location ~* /(seek|contribute|charm|pop|grade)
        {
            if (!-e $request_filename) {
                rewrite ^/(.*)  /index.php?s=/$1 last;
            }
        }
        location /public
        {
        }
        location ~* ^/uploads
        {
            deny all;
        }
        location ~* ^/static
        {
            deny all;
        }
        {VAR_NGINX_CAN_ACCESS_PHP_FILE}if ($request_uri ~* \.(rar|7z|zip|sql|asp|jsp|php)) {
        {VAR_NGINX_CAN_ACCESS_PHP_FILE}    return 404;
        {VAR_NGINX_CAN_ACCESS_PHP_FILE}}
        if ($http_user_agent ~* (ApacheBench)) {
            return 403;
        }

        location ~ .*.(svn|git|cvs|asp|aspx|zip|rar|env) {
            return 404;
        }
        location ~ ^/(\.htaccess|\.git|\.svn|\.project|LICENSE|README.md|\.env|composer.lock|composer.json)
        {
            deny all;
        }
        error_page   500 502 503 504  /503.html;

        location / {
            #limit_req   zone=req0  burst=5 nodelay;
            limit_req   zone=req1  burst=5 nodelay;
            limit_req   zone=req2  burst=5 nodelay;
            limit_req   zone=req3  burst=5 nodelay;
            limit_req   zone=req4  burst=5 nodelay;
            # include deny_ip.conf;

            if (!-e $request_filename) {
                rewrite ^/(.*)  /index.php?s=/$1 last;
            }
        }

        set $fhost $http_host;
        if ($http_origin_host != ''){
            set $fhost $http_origin_host;
        }

        # php-fpm处理
        location ~ \.php($|/) {
            fastcgi_pass   unix:/usr/local/var/run/php-fpm.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
            fastcgi_param  PHP_VALUE open_basedir={APP_PROJECT_ROOT}:/tmp/:/public/;
            fastcgi_param  HTTP_HOST $fhost if_not_empty;
            include        fastcgi_params;

            # 解决开黑后台无限重定向问题
            {VAR_NGINX_CAN_ACCESS_ADMIN}fastcgi_split_path_info ^((?U).+.php)(/?.+)$;
            {VAR_NGINX_CAN_ACCESS_ADMIN}fastcgi_param  PATH_INFO $fastcgi_path_info;
            {VAR_NGINX_CAN_ACCESS_ADMIN}fastcgi_param  PATH_TRANSLATED $document_root$fastcgi_path_info;
        }
        access_log logs/access.log log_json;
        error_log  logs/error.log;
    }
}